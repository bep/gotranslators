//go:generate go run main.go

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/fs"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"sort"
	"strings"

	_ "github.com/go-playground/locales"
)

const header = `
// This file is autogenerated.

package translators

`

func main() {
	const localeMod = "github.com/go-playground/locales"
	b := &bytes.Buffer{}
	cmd := exec.Command("go", "list", "-m", "-json", localeMod)
	cmd.Stdout = b

	if err := cmd.Run(); err != nil {
		log.Fatal(err)
	}

	m := make(map[string]interface{})

	if err := json.Unmarshal(b.Bytes(), &m); err != nil {
		log.Fatal(err)
	}

	dir := m["Dir"].(string)

	var packages []string

	filepath.WalkDir(dir, func(path string, d fs.DirEntry, err error) error {
		if !d.IsDir() || d.Name() == "currency" {
			return nil
		}

		name := filepath.Base(path)

		if _, err := os.Stat(filepath.Join(path, fmt.Sprintf("%s.go", name))); err == nil {
			packages = append(packages, name)
		}

		return nil
	})

	sort.Strings(packages)

	f, err := os.Create(filepath.Join("../translators.autogen.go"))
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	fmt.Fprintf(f, "%s\nimport(\n\"github.com/go-playground/locales\"\n", header)

	for _, imp := range packages {
		fmt.Fprintf(f, "\"%s/%s\"\n", localeMod, imp)
	}

	fmt.Fprintln(f, "\n)\n\nfunc init() {")

	for _, imp := range packages {
		fmt.Fprintf(f, "translatorFuncs[%q] = func() locales.Translator { return %s.New() }\n", strings.ToLower(imp), imp)
	}

	fmt.Fprintln(f, "\n}")

}
